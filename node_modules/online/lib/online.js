
/**
 * Module dependencies.
 */

var debug = require('debug')('online');

/**
 * Noop.
 */

var noop = function(){};

/**
 * Create a new `Online` thing.
 *
 * @param {RedisClient} client
 * @param {Object} options
 * @return {Online}
 * @api public
 */

module.exports = function(client, options){
  return new Online(client, options);
};

/**
 * Initialize an `Online` tracker thingy
 * with the given redis `client`.
 *
 * Options:
 *
 *  - `ttl` time-to-live in milliseconds [15 minutes]
 *
 * NOTE: `ttl` must not exceed 60 minutes.
 *
 * @param {RedisClient} client
 * @param {Object} options
 * @api public
 */

function Online(client, options) {
  options = options || {};
  this.db = client;
  this.ttl = options.ttl || 900000;
  this.prefix = 'online';
}

/**
 * Clear all activity tracking.
 *
 * @param {Function} fn
 * @api public
 */

Online.prototype.clear = function(fn){
  var db = this.db;
  fn = fn || noop;
  debug('clear');
  db.keys(this.prefix + ':*', function(err, keys){
    if (err) return fn(err);
    debug('clearing %j', keys);
    if (!keys.length) return fn();
    // TODO: wtf node_redis
    var args = keys.concat(fn);
    db.del.apply(db, args);
  });
};

/**
 * Add `id` to the current minute set and invoke `fn(err)`.
 *
 * @param {Number|String} id
 * @param {Function} fn
 * @api public
 */

Online.prototype.add = function(id, fn){
  var min = new Date().getMinutes();
  var key = this.prefix + ':' + min;
  var ttl = this.ttl / 1000;
  debug('add %s to %s', id, key);
  this.db
    .multi()
    .sadd(key, id)
    .expire(key, ttl)
    .exec(fn || noop);
};

/**
 * Get active user ids within the last `n` minutes.
 *
 * @param {Number} n
 * @param {Function} fn
 * @api public
 */

Online.prototype.last = function(n, fn){
  var min = new Date().getMinutes();
  var start = min - n;
  if (start < 0) start = 60 + start;
  debug('active %s..%s', start, min);
  var keys = this.keyRange(start, min);
  this.db.sunion(keys, fn);
};

/**
 * Get online key range `from` .. `to`.
 *
 * @param {Number} from
 * @param {Number} to
 * @return {Array}
 * @api private
 */

Online.prototype.keyRange = function(from, to){
  var keys = [];
  do {
    keys.push(this.prefix + ':' + from);
  } while (from++ < to);
  return keys;
};

